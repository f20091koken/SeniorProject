import torch
import torch.nn as nn
import torch.optim as optim

class AlphaZeroNet(nn.Module):
    def __init__(self):
        super(AlphaZeroNet, self).__init__()
        self.conv1 = nn.Conv2d(1, 128, kernel_size=3, padding=1)
        self.conv2 = nn.Conv2d(128, 128, kernel_size=3, padding=1)
        self.fc1 = nn.Linear(128 * 4 * 4, 256)
        self.fc2 = nn.Linear(256, 1)  # 評価値
        self.fc3 = nn.Linear(256, 16)  # 手の選択

    def forward(self, x):
        x = torch.relu(self.conv1(x))
        x = torch.relu(self.conv2(x))
        x = x.view(-1, 128 * 4 * 4)
        x = torch.relu(self.fc1(x))
        value = torch.tanh(self.fc2(x))
        policy = torch.softmax(self.fc3(x), dim=1)
        return value, policy

# モデルのインスタンス化
model = AlphaZeroNet()
criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)